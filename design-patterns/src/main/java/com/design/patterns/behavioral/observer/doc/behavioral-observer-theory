Nombre:
    Observer

Tipo:
    Behavioral

Propósito:
    Propósito: Defina una dependencia de uno a muchos entre los objetos de manera que cuando un objeto cambia de estado,ç
     todos los que dependen de él son notificados y se actualizan automáticamente.

    Los Observers se registran con el Subject a medida que se crean. Siempre que el Subject cambie, difundirá a todos
    los Observers registrados que ha cambiado, y cada Observer consulta al Subject que supervisa para obtener el cambio
     de estado que se haya generado.

    En Java tenemos acceso a la clase Observer mediante java.util.Observer

Aplicación:

    Usamos el patrón Observer cuando...

    Un cambio en un objeto requiere cambiar los demás, pero no sabemos cuántos objetos hay que cambiar.
    Configurar de manera dinámica un componente de la Vista, envés de estáticamente durante el tiempo de compilación.
    Un objeto debe ser capaz de notificar a otros objetos sin que estos objetos estén fuertemente acoplados.



Ejemplos:
    El ejemplo de Subasta presenta una variante distinta de muchas fuentes en Internet de este patrón, usaremos una
    clase Evento para controlar los sucesos a los que los Observers responderan.

    Subasta